{"version":3,"sources":["ImageLabel/ImageLabel.js","Title/Title.js","App.js","registerServiceWorker.js","index.js"],"names":["ImageLabel","_this","this","react_default","a","createElement","id","className","href","onClick","e","props","textBackingCallback","Component","Title","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","generateClassNameWith","target","rel","classes","isBacked","App","state","backed","w","Math","max","document","documentElement","clientWidth","window","innerWidth","setBackgroundImage","src_Title_Title","src_ImageLabel_ImageLabel","toggleTextBacking","bind","setState","screenWidth","dim","body","style","backgroundImage","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.09f0a81d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './ImageLabel.css'\n\nclass ImageLabel extends Component {\n    render() {\n        return (\n            <div id=\"image_tag\">\n                <p className=\"tag_text backed\">Image generated from <a href=\"https://unsplash.com/\">Unsplash</a></p>\n                <p className=\"tag_text backed\"><a onClick={e => this.props.textBackingCallback()}>Toggle text backing</a></p>\n            </div>\n        )\n    }\n}\n\nexport default ImageLabel","import React, {Component} from 'react';\nimport './Title.css'\n\nclass Title extends Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div id=\"title_wrapper\" className=\"full_section_wrapper\">\n                <div id=\"title_content_wrapper\">\n                    <h1 className={this.generateClassNameWith(\"name_title\")}>Thomas Yung<span className=\"flashing\">_</span></h1>\n                    <h3 className={this.generateClassNameWith(\"role_title\")}>Software Developer &<br/>Student at Imperial College London</h3>\n\n                    <table id=\"options_table\">\n                        <tbody>\n                            <tr>\n                                <td className={this.generateClassNameWith(\"option_text\")}>\n                                    <a href=\"https://drive.google.com/file/d/1iUfLsJz8YEqU7fhagFJOm5CDZPhfTjW1/view?usp=sharing\"\n                                       target=\"_blank\" rel=\"noopener noreferrer\">CV</a>\n                                </td>\n                                <td className={this.generateClassNameWith(\"option_text\")}>\n                                    <a href=\"https://github.com/thomas-yung\"\n                                       target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n                                </td>\n                                <td className={this.generateClassNameWith(\"option_text\")}>\n                                    <a href=\"https://www.linkedin.com/in/thomas-yung-42216b13a/\"\n                                       target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a>\n                                </td>\n                                <td className={this.generateClassNameWith(\"option_text\")}>\n                                    <a href=\"mailto:thomasyung@hotmail.co.uk\">Contact</a>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n\n    generateClassNameWith(classes) {\n        return classes + (this.props.isBacked ? \" backed\" : \"\");\n    }\n\n}\n\nexport default Title;\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport ImageLabel from './ImageLabel/ImageLabel.js';\nimport Title from './Title/Title.js';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            backed: false\n        }\n\n        let w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n        // let h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\n        App.setBackgroundImage(w);\n    }\n\n    render() {\n        return (\n            <div id=\"page_wrapper\">\n                <Title isBacked={this.state.backed}/>\n                <ImageLabel textBackingCallback={this.toggleTextBacking.bind(this)}/>\n            </div>\n        );\n    }\n\n    static setBackgroundImage(screenWidth) {\n        let dim = \"1920x1080\";  // 1080p\n\n        if (screenWidth > 2560) {\n            dim = \"3840x2160\";  // 4k\n        }\n        if (screenWidth > 1920) {\n            dim = \"2560x1440\";  // 1440p\n        }\n\n        document.body.style.backgroundImage = \"url(https://source.unsplash.com/\" + dim + \"/?+mountain)\";\n    }\n\n    toggleTextBacking() {\n        let isBacked = !this.state.backed;\n\n        this.setState({\n            backed: isBacked\n        })\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}