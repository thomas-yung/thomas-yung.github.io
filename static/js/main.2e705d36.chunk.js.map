{"version":3,"sources":["ImageLabel/ImageLabel.js","Title/Title.js","App.js","registerServiceWorker.js","index.js"],"names":["ImageLabel","react_default","a","createElement","id","href","Component","Title","className","target","App","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","src_Title_Title","src_ImageLabel_ImageLabel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"mQAaeA,gMARP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACJH,EAAAC,EAAAC,cAAA,KAAGC,GAAG,kBAAN,wBAA4CH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,yBAAR,qBAJnCC,cCgCVC,0LA7BP,OACIN,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBAAgBI,UAAU,wBAC9BP,EAAAC,EAAAC,cAAA,OAAKC,GAAG,yBACJH,EAAAC,EAAAC,cAAA,MAAIK,UAAU,cAAd,cAAsCP,EAAAC,EAAAC,cAAA,QAAMK,UAAU,YAAhB,MACtCP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,cAAd,uBAA+CP,EAAAC,EAAAC,cAAA,WAA/C,sCAEAF,EAAAC,EAAAC,cAAA,SAAOC,GAAG,iBACNH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIK,UAAU,eACVP,EAAAC,EAAAC,cAAA,KAAGE,KAAK,qFAAqFI,OAAO,UAApG,OAEJR,EAAAC,EAAAC,cAAA,MAAIK,UAAU,eACVP,EAAAC,EAAAC,cAAA,KAAGE,KAAK,iCAAiCI,OAAO,UAAhD,WAEJR,EAAAC,EAAAC,cAAA,MAAIK,UAAU,eACVP,EAAAC,EAAAC,cAAA,KAAGE,KAAK,qDAAqDI,OAAO,UAApE,aAEJR,EAAAC,EAAAC,cAAA,MAAIK,UAAU,eACVP,EAAAC,EAAAC,cAAA,KAAGE,KAAK,mCAAR,uBArBZC,cCoBLI,cAfX,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACVH,0EAKN,OACIV,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBACJH,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,cAXEb,aCIZc,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DAsCR,SAASC,EAAgBC,GACrBC,UAAUC,cACLC,SAASH,GACTI,KAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,WAKxBC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAM/BC,MAAM,SAAAC,GACHH,QAAQG,MAAM,4CAA6CA,KCzEvEC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SDclC,WACX,GAA6C,kBAAmBnB,UAAW,CAGvE,GADkB,IAAIoB,IAAIC,GAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIrC,OAGJ5B,OAAO6B,iBAAiB,OAAQ,WAC5B,IAAMxB,EAAK,GAAAyB,OAAMH,GAAN,sBAEP7B,GAiDhB,SAAiCO,GAE7B0B,MAAM1B,GACDI,KAAK,SAAAuB,GAGsB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GAC/BA,EAAa4B,aAAa7B,KAAK,WAC3BT,OAAOC,SAASsC,aAKxBnC,EAAgBC,KAGvBc,MAAM,WACHF,QAAQC,IACJ,mEArEAsB,CAAwBnC,GAIxBC,UAAUC,cAAc8B,MAAM5B,KAAK,WAC/BQ,QAAQC,IACJ,+GAMRd,EAAgBC,MCzChCoC","file":"static/js/main.2e705d36.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './ImageLabel.css'\n\nclass ImageLabel extends Component {\n    render() {\n        return (\n            <div id=\"image_tag\">\n                <p id=\"image_tag_text\">Image generated from <a href=\"https://unsplash.com/\">Unsplash</a></p>\n            </div>\n        )\n    }\n}\n\nexport default ImageLabel","import React, {Component} from 'react';\nimport './Title.css'\n\nclass Title extends Component {\n\n    render() {\n        return (\n            <div id=\"title_wrapper\" className=\"full_section_wrapper\">\n                <div id=\"title_content_wrapper\">\n                    <h1 className=\"name_title\">Thomas Yung<span className=\"flashing\">_</span></h1>\n                    <h3 className=\"role_title\">Software Developer &<br />Student at Imperial College London</h3>\n\n                    <table id=\"options_table\">\n                        <tr>\n                            <td className=\"option_text\">\n                                <a href=\"https://drive.google.com/file/d/1iUfLsJz8YEqU7fhagFJOm5CDZPhfTjW1/view?usp=sharing\" target=\"_blank\">CV</a>\n                            </td>\n                            <td className=\"option_text\">\n                                <a href=\"https://github.com/thomas-yung\" target=\"_blank\">GitHub</a>\n                            </td>\n                            <td className=\"option_text\">\n                                <a href=\"https://www.linkedin.com/in/thomas-yung-42216b13a/\" target=\"_blank\">LinkedIn</a>\n                            </td>\n                            <td className=\"option_text\">\n                                <a href=\"mailto:thomasyung@hotmail.co.uk\">Contact</a>\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Title;\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport ImageLabel from './ImageLabel/ImageLabel.js';\nimport Title from './Title/Title.js';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n\n    render() {\n        return (\n            <div id=\"page_wrapper\">\n                <Title />\n                <ImageLabel />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}