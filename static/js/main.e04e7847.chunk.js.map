{"version":3,"sources":["Components/Title.js","Components/ImageLabel.js","Components/App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","id","className","href","target","rel","Component","ImageLabel","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","w","Math","max","document","documentElement","clientWidth","window","innerWidth","setBackgroundImage","Components_Title","Components_ImageLabel","screenWidth","dim","body","style","backgroundImage","Boolean","location","hostname","match","ReactDOM","render","Components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAuCeA,sMAlCP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBAAgBC,UAAU,wBAC9BJ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,yBACJH,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cAAd,cAAsCJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,YAAhB,MACtCJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cAAd,uBAA+CJ,EAAAC,EAAAC,cAAA,WAA/C,sCAEAF,EAAAC,EAAAC,cAAA,SAAOC,GAAG,iBACNH,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eACVJ,EAAAC,EAAAC,cAAA,KAAGG,KAAK,qFACLC,OAAO,SAASC,IAAI,uBADvB,OAGJP,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eACVJ,EAAAC,EAAAC,cAAA,KAAGG,KAAK,iCACLC,OAAO,SAASC,IAAI,uBADvB,WAGJP,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eACVJ,EAAAC,EAAAC,cAAA,KAAGG,KAAK,qDACLC,OAAO,SAASC,IAAI,uBADvB,aAGJP,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eACVJ,EAAAC,EAAAC,cAAA,KAAGG,KAAK,mCAAR,wBAzBZG,cCULC,mLARP,OACIT,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACJH,EAAAC,EAAAC,cAAA,KAAGC,GAAG,kBAAN,wBAA4CH,EAAAC,EAAAC,cAAA,KAAGG,KAAK,yBAAR,qBAJnCG,aCyCVE,cAjCX,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IAEN,IAAIQ,EAAIC,KAAKC,IAAIC,SAASC,gBAAgBC,YAAaC,OAAOC,YAAc,GAH7D,OAMfhB,EAAIiB,mBAAmBR,GANRP,wEAUf,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBACJH,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAC2B,EAAD,oDAKcC,GACtB,IAAIC,EAAM,YAEND,EAAc,OACdC,EAAM,aAGND,EAAc,OACdC,EAAM,aAGVT,SAASU,KAAKC,MAAMC,gBAAkB,mCAAqCH,EAAM,sBA/BvEvB,aCIE2B,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASnB,SAASoB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e04e7847.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Title extends Component {\n\n    render() {\n        return (\n            <div id=\"title_wrapper\" className=\"full_section_wrapper\">\n                <div id=\"title_content_wrapper\">\n                    <h1 className=\"name_title\">Thomas Yung<span className=\"flashing\">_</span></h1>\n                    <h3 className=\"role_title\">Software Developer &<br/>Student at Imperial College London</h3>\n\n                    <table id=\"options_table\">\n                        <tbody>\n                        <tr>\n                            <td className=\"option_text\">\n                                <a href=\"https://drive.google.com/file/d/1iUfLsJz8YEqU7fhagFJOm5CDZPhfTjW1/view?usp=sharing\"\n                                   target=\"_blank\" rel=\"noopener noreferrer\">CV</a>\n                            </td>\n                            <td className=\"option_text\">\n                                <a href=\"https://github.com/thomas-yung\"\n                                   target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n                            </td>\n                            <td className=\"option_text\">\n                                <a href=\"https://www.linkedin.com/in/thomas-yung-42216b13a/\"\n                                   target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a>\n                            </td>\n                            <td className=\"option_text\">\n                                <a href=\"mailto:thomasyung@hotmail.co.uk\">Contact</a>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Title;\n","import React, {Component} from 'react';\n\nclass ImageLabel extends Component {\n    render() {\n        return (\n            <div id=\"image_tag\">\n                <p id=\"image_tag_text\">Image generated from <a href=\"https://unsplash.com/\">Unsplash</a></p>\n            </div>\n        )\n    }\n}\n\nexport default ImageLabel","import React, {Component} from 'react';\nimport '../Stylesheets/App.css';\nimport '../Stylesheets/Title.css';\nimport '../Stylesheets/ImageLabel.css';\n\nimport Title from './Title';\nimport ImageLabel from './ImageLabel';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n        // let h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\n        App.setBackgroundImage(w);\n    }\n\n    render() {\n        return (\n            <div id=\"page_wrapper\">\n                <Title/>\n                <ImageLabel/>\n            </div>\n        );\n    }\n\n    static setBackgroundImage(screenWidth) {\n        let dim = \"1920x1080\";  // 1080p\n\n        if (screenWidth > 2560) {\n            dim = \"3840x2160\";  // 4k\n        }\n\n        if (screenWidth > 1920) {\n            dim = \"2560x1440\";  // 1440p\n        }\n\n        document.body.style.backgroundImage = \"url(https://source.unsplash.com/\" + dim + \"/?+mountain)\";\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Stylesheets/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}